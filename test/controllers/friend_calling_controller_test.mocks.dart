// Mocks generated by Mockito 5.4.6 from annotations
// in resonate/test/controllers/friend_calling_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:appwrite/appwrite.dart' as _i5;
import 'package:appwrite/enums.dart' as _i9;
import 'package:appwrite/models.dart' as _i3;
import 'package:appwrite/src/client.dart' as _i2;
import 'package:appwrite/src/realtime.dart' as _i7;
import 'package:appwrite/src/realtime_subscription.dart' as _i4;
import 'package:flutter_callkit_incoming/flutter_callkit_incoming.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocumentList_1 extends _i1.SmartFake implements _i3.DocumentList {
  _FakeDocumentList_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDocument_2 extends _i1.SmartFake implements _i3.Document {
  _FakeDocument_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRealtimeSubscription_3 extends _i1.SmartFake
    implements _i4.RealtimeSubscription {
  _FakeRealtimeSubscription_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeExecutionList_4 extends _i1.SmartFake implements _i3.ExecutionList {
  _FakeExecutionList_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeExecution_5 extends _i1.SmartFake implements _i3.Execution {
  _FakeExecution_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [Databases].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabases extends _i1.Mock implements _i5.Databases {
  MockDatabases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
          )
          as _i2.Client);

  @override
  _i6.Future<_i3.DocumentList> listDocuments({
    required String? databaseId,
    required String? collectionId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listDocuments, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #queries: queries,
            }),
            returnValue: _i6.Future<_i3.DocumentList>.value(
              _FakeDocumentList_1(
                this,
                Invocation.method(#listDocuments, [], {
                  #databaseId: databaseId,
                  #collectionId: collectionId,
                  #queries: queries,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.DocumentList>);

  @override
  _i6.Future<_i3.Document> createDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    required Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDocument, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            }),
            returnValue: _i6.Future<_i3.Document>.value(
              _FakeDocument_2(
                this,
                Invocation.method(#createDocument, [], {
                  #databaseId: databaseId,
                  #collectionId: collectionId,
                  #documentId: documentId,
                  #data: data,
                  #permissions: permissions,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Document>);

  @override
  _i6.Future<_i3.Document> getDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDocument, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #queries: queries,
            }),
            returnValue: _i6.Future<_i3.Document>.value(
              _FakeDocument_2(
                this,
                Invocation.method(#getDocument, [], {
                  #databaseId: databaseId,
                  #collectionId: collectionId,
                  #documentId: documentId,
                  #queries: queries,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Document>);

  @override
  _i6.Future<_i3.Document> upsertDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    required Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#upsertDocument, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            }),
            returnValue: _i6.Future<_i3.Document>.value(
              _FakeDocument_2(
                this,
                Invocation.method(#upsertDocument, [], {
                  #databaseId: databaseId,
                  #collectionId: collectionId,
                  #documentId: documentId,
                  #data: data,
                  #permissions: permissions,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Document>);

  @override
  _i6.Future<_i3.Document> updateDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateDocument, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            }),
            returnValue: _i6.Future<_i3.Document>.value(
              _FakeDocument_2(
                this,
                Invocation.method(#updateDocument, [], {
                  #databaseId: databaseId,
                  #collectionId: collectionId,
                  #documentId: documentId,
                  #data: data,
                  #permissions: permissions,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Document>);

  @override
  _i6.Future<dynamic> deleteDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDocument, [], {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
            }),
            returnValue: _i6.Future<dynamic>.value(),
          )
          as _i6.Future<dynamic>);
}

/// A class which mocks [Realtime].
///
/// See the documentation for Mockito's code generation for more information.
class MockRealtime extends _i1.Mock implements _i7.Realtime {
  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
            returnValueForMissingStub: _FakeClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.Client);

  @override
  _i4.RealtimeSubscription subscribe(List<String>? channels) =>
      (super.noSuchMethod(
            Invocation.method(#subscribe, [channels]),
            returnValue: _FakeRealtimeSubscription_3(
              this,
              Invocation.method(#subscribe, [channels]),
            ),
            returnValueForMissingStub: _FakeRealtimeSubscription_3(
              this,
              Invocation.method(#subscribe, [channels]),
            ),
          )
          as _i4.RealtimeSubscription);
}

/// A class which mocks [FlutterCallkitIncoming].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterCallkitIncoming extends _i1.Mock
    implements _i8.FlutterCallkitIncoming {}

/// A class which mocks [Functions].
///
/// See the documentation for Mockito's code generation for more information.
class MockFunctions extends _i1.Mock implements _i5.Functions {
  @override
  _i2.Client get client =>
      (super.noSuchMethod(
            Invocation.getter(#client),
            returnValue: _FakeClient_0(this, Invocation.getter(#client)),
            returnValueForMissingStub: _FakeClient_0(
              this,
              Invocation.getter(#client),
            ),
          )
          as _i2.Client);

  @override
  _i6.Future<_i3.ExecutionList> listExecutions({
    required String? functionId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listExecutions, [], {
              #functionId: functionId,
              #queries: queries,
            }),
            returnValue: _i6.Future<_i3.ExecutionList>.value(
              _FakeExecutionList_4(
                this,
                Invocation.method(#listExecutions, [], {
                  #functionId: functionId,
                  #queries: queries,
                }),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i3.ExecutionList>.value(
              _FakeExecutionList_4(
                this,
                Invocation.method(#listExecutions, [], {
                  #functionId: functionId,
                  #queries: queries,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.ExecutionList>);

  @override
  _i6.Future<_i3.Execution> createExecution({
    required String? functionId,
    String? body,
    bool? xasync,
    String? path,
    _i9.ExecutionMethod? method,
    Map<dynamic, dynamic>? headers,
    String? scheduledAt,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createExecution, [], {
              #functionId: functionId,
              #body: body,
              #xasync: xasync,
              #path: path,
              #method: method,
              #headers: headers,
              #scheduledAt: scheduledAt,
            }),
            returnValue: _i6.Future<_i3.Execution>.value(
              _FakeExecution_5(
                this,
                Invocation.method(#createExecution, [], {
                  #functionId: functionId,
                  #body: body,
                  #xasync: xasync,
                  #path: path,
                  #method: method,
                  #headers: headers,
                  #scheduledAt: scheduledAt,
                }),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i3.Execution>.value(
              _FakeExecution_5(
                this,
                Invocation.method(#createExecution, [], {
                  #functionId: functionId,
                  #body: body,
                  #xasync: xasync,
                  #path: path,
                  #method: method,
                  #headers: headers,
                  #scheduledAt: scheduledAt,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Execution>);

  @override
  _i6.Future<_i3.Execution> getExecution({
    required String? functionId,
    required String? executionId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExecution, [], {
              #functionId: functionId,
              #executionId: executionId,
            }),
            returnValue: _i6.Future<_i3.Execution>.value(
              _FakeExecution_5(
                this,
                Invocation.method(#getExecution, [], {
                  #functionId: functionId,
                  #executionId: executionId,
                }),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i3.Execution>.value(
              _FakeExecution_5(
                this,
                Invocation.method(#getExecution, [], {
                  #functionId: functionId,
                  #executionId: executionId,
                }),
              ),
            ),
          )
          as _i6.Future<_i3.Execution>);
}
